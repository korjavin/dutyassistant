# This workflow defines the Continuous Integration and Continuous Deployment (CI/CD) pipeline.
# It automates the process of testing, building, and publishing the application's Docker image.
name: CI/CD Pipeline

# --- Trigger Conditions ---
# The workflow runs automatically on every push to the 'master' branch.
on:
  push:
    branches: [ "master" ]
  # Allows the workflow to be run manually from the Actions tab in GitHub.
  workflow_dispatch:

# --- Jobs ---
# The workflow consists of two sequential jobs: 'test' and 'build-and-push'.
jobs:
  # --- Test Job ---
  # This job is responsible for running automated tests to ensure code quality.
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest # Use the latest stable Ubuntu runner.
    steps:
      # Step 1: Check out the repository's source code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Go programming environment.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23' # Specify the Go version consistent with the Dockerfile.

      # Step 4: Run the unit tests using vendored dependencies.
      # The '-v' flag enables verbose output. './...' runs tests in all subdirectories.
      # The '-mod=vendor' flag ensures we use vendored dependencies.
      - name: Run tests
        run: go test -mod=vendor -v ./...

  # --- Build and Push Job ---
  # This job builds the Docker image and pushes it to the GitHub Container Registry (GHCR).
  # It only runs if the 'test' job completes successfully.
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # Specifies that this job depends on the 'test' job.

    # --- Permissions ---
    # Grants the necessary permissions to the GITHUB_TOKEN for this job.
    permissions:
      contents: write # Required to commit and push changes to the repository.
      packages: write # Required to push Docker images to GHCR.

    steps:
      # Step 1: Check out the repository's source code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Go programming environment.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'


      # Step 4: Log in to the GitHub Container Registry.
      # Uses a temporary GITHUB_TOKEN for secure authentication.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # The user who triggered the workflow.
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Build the Docker image and push it to GHCR with specific tags.
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          # The build context is the root of the repository.
          context: .
          # Specifies the path to the Dockerfile.
          file: ./deployments/Dockerfile
          # Enables pushing the image to the registry.
          push: true
          # Assigns both commit SHA and latest tags.
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest

      # Step 6: Update docker-compose.yml with specific commit SHA and push to deploy branch.
      - name: Update and commit docker-compose.yml
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git checkout -B deploy
          # Update image tags from :latest to specific commit SHA
          sed -i "s|ghcr.io/${{ github.repository }}:latest|ghcr.io/${{ github.repository }}:${{ github.sha }}|g" deployments/docker-compose.yml
          git add deployments/docker-compose.yml
          git commit -m "ci: Update image tag to ${{ github.sha }}" || echo "No changes to commit"
          git push origin deploy --force

      # Step 7: Trigger Portainer webhook to redeploy the application.
      - name: Trigger Portainer Redeploy Webhook
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: ${{ secrets.PORTAINER_REDEPLOY_HOOK }}
          webhook_secret: "trigger"