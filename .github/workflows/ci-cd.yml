# This workflow defines the Continuous Integration and Continuous Deployment (CI/CD) pipeline.
# It automates the process of testing, building, and publishing the application's Docker image.
name: CI/CD Pipeline

# --- Trigger Conditions ---
# The workflow runs automatically on every push to the 'main' branch.
on:
  push:
    branches: [ "main" ]
  # Allows the workflow to be run manually from the Actions tab in GitHub.
  workflow_dispatch:

# --- Jobs ---
# The workflow consists of two sequential jobs: 'test' and 'build-and-push'.
jobs:
  # --- Test Job ---
  # This job is responsible for running automated tests to ensure code quality.
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest # Use the latest stable Ubuntu runner.
    steps:
      # Step 1: Check out the repository's source code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Go programming environment.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Specify the Go version consistent with the Dockerfile.

      # Step 3: Run the unit tests.
      # The '-v' flag enables verbose output. './...' runs tests in all subdirectories.
      - name: Run tests
        run: go test -v ./...

  # --- Build and Push Job ---
  # This job builds the Docker image and pushes it to the GitHub Container Registry (GHCR).
  # It only runs if the 'test' job completes successfully.
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test # Specifies that this job depends on the 'test' job.

    # --- Permissions ---
    # Grants the necessary permissions to the GITHUB_TOKEN for this job.
    permissions:
      contents: read  # Required to check out the repository.
      packages: write # Required to push Docker images to GHCR.

    steps:
      # Step 1: Check out the repository's source code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to the GitHub Container Registry.
      # Uses a temporary GITHUB_TOKEN for secure authentication.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # The user who triggered the workflow.
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Extract metadata (tags and labels) for the Docker image.
      # This action automatically generates useful tags like 'latest' and the commit SHA.
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Formats the image name: ghcr.io/owner/repo.

      # Step 4: Build the Docker image and push it to GHCR.
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          # The build context is the root of the repository.
          context: .
          # Specifies the path to the Dockerfile.
          file: ./deployments/Dockerfile
          # Enables pushing the image to the registry.
          push: true
          # Assigns the tags generated by the metadata action.
          tags: ${{ steps.meta.outputs.tags }}
          # Assigns the labels generated by the metadata action.
          labels: ${{ steps.meta.outputs.labels }}